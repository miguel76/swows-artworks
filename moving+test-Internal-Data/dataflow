
				@prefix df: <http://www.swows.org/dataflow#> . 
				@prefix swi: <http://www.swows.org/instance#> . 
				@prefix xsd: <http://www.w3.org/2001/XMLSchema#> . 
			<#defaultInput> a df:SelectGraph ;df:input swi:InputDataset .<#Out> a df:UnionGraph ; df:input <#Framing> ;df:input <#View> ;df:name "Out" .<#touches> a df:UpdatableGraph ;df:name "touches" ;df:configTxt '''INSERT {
  ?s ?p ?o .
}
WHERE {
  GRAPH <#touchEvent> {
    ?s ?p ?o .
  }
}''' .<#SelArtwork> a df:UpdatableGraph ;df:name "SelArtwork" ;df:input [ a df:InlineDataset ;df:namedInput [a df:NamedGraph ; df:name "Event" ; df:input <#defaultInput> ; df:id <#event> ];];df:configTxt '''PREFIX evt:  <http://www.swows.org/2013/07/xml-dom-events#>
PREFIX fb: <http://rdf.freebase.com/ns/>

INSERT {
  <#global> <#selectedArtwork> fb:m.063j6x5.
}
WHERE {
  NOT EXISTS {<#global> <#selectedArtwork> ?selected}
};

DELETE { <#global> <#selectedArtwork> ?oldSelected }
INSERT { <#global> <#selectedArtwork> ?newSelected }
WHERE {
  <#global> <#selectedArtwork> ?oldSelected.
  GRAPH <#event> {
    ?event
      a evt:Event ;
      evt:type "click" ;
      evt:target ?newSelected .
  }
};''' .swi:OutputDataset a df:InlineDataset ; df:input <#Out>  . <#Images> a df:ConstructGraph ;df:name "Images" ;df:configTxt '''# Images from artworks of Amedeo Modigliani
PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX umbel-sc: <http://umbel.org/umbel/sc/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ff: <http://factforge.net/>
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>

SELECT DISTINCT ?artwork ?image ?uri ?sizeX ?sizeY
WHERE {
    dbpedia:Amedeo_Modigliani fb:visual_art.visual_artist.artworks ?artwork .
    ?artwork fb:common.topic.image ?image .
    ?image
		fb:type.content.source ?source ;
    	fb:common.image.size ?size .
    ?source fb:type.content_import.uri ?uri .
    ?size
        fb:measurement_unit.rect_size.x ?sizeX ;
        fb:measurement_unit.rect_size.y ?sizeY .
  	BIND(afn:sqrt(20000*?sizeX/?sizeY) AS ?newSizeX) .
   	BIND(?newSizeX*?sizeY/?sizeX AS ?newSizeY) .
	BIND(?newSizeX*?newSizeY AS ?newSizeTot) .
}''' .<#SelectedArtwork> a df:ConstructGraph ;df:name "SelectedArtwork" ;df:configTxt '''PREFIX fb: <http://rdf.freebase.com/ns/>

CONSTRUCT{
  <#global> <#selectedArtwork> fb:m.063j6x5.
}
WHERE{}''' .<#SelectTest> a df:ConstructGraph ;df:name "SelectTest" ;df:configTxt '''PREFIX fb: <http://rdf.freebase.com/ns/>

SELECT ?x ?y
WHERE {
  VALUES (?x ?y) {
  (3 12)
  (1 4)
  (2 8)
  }
} ORDER BY ?x
''' .<#Framing> a df:ConstructGraph ;df:name "Framing" ;df:configTxt '''PREFIX nn:    <http://www.swows.org/xml/no-namespace#>
PREFIX xml:   <http://www.swows.org/2013/07/xml-dom#>
PREFIX svg:   <http://www.w3.org/2000/svg#>
PREFIX xlink: <http://www.w3.org/1999/xlink#>
PREFIX swi:   <http://www.swows.org/instance#>

PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX umbel-sc: <http://umbel.org/umbel/sc/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ff: <http://factforge.net/>
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>

PREFIX sparql-res: <http://www.w3.org/2005/sparql-results#>

CONSTRUCT {

  <>
    <#padding> ?padding;
    <#smallImagesWidth> ?smallImagesWidth;
    <#smallImagesHeight> ?smallImagesHeight;
    <#windowWidth> ?windowWidth;
    <#windowHeight> ?windowHeight;
#    <#topBarX> ?topBarX;
#    <#topBarY> ?topBarY;
#    <#topBarWidth> ?topBarWidth;
    <#bottomBarWidth> ?bottomBarWidth;
    <#leftBarHeight> ?leftBarHeight;
    <#rightBarHeight> ?rightBarHeight.

  <#svgDoc>
    a xml:Document ;
    xml:hasChild <#svgElem> .

  <#svgElem>
    a svg:svg ;
    nn:version "1.1" ;
    nn:width ?windowWidth ;
    nn:height ?windowHeight ;
    xml:hasChild <#centralImage>, <#infoBox>, <#topBar>, <#bottomBar>, <#leftBar>, <#rightBar>.

  <#centralImage>
    a svg:image ;
    nn:x ?centralImageX ;
    nn:y ?centralImageY ;
    nn:width ?centralImageWidth ;
    nn:height ?centralImageHeight .

  <#infoBox> 
    a svg:g;
    xml:hasChild <#infoBoxName>, <#infoBoxArtist>, <#infoBoxArtForm>, <#infoBoxArtGenre>, <#infoBoxArtSubject>, <#infoBoxDate>.

  <#infoBoxName>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxNameY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#infoBoxArtist>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxArtistY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#infoBoxArtForm>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxArtFormY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#infoBoxArtGenre>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxArtGenreY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#infoBoxArtSubject>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxArtSubjectY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#infoBoxDate>
    a svg:text ;
    nn:x ?infoBoxX ;
    nn:y ?infoBoxDateY ;
    nn:width ?infoBoxWidth ;
    nn:height ?infoBoxFieldHeight .

  <#topBar> a svg:g.

  <#topBarArea>
    a <#ImageArea>;
    <#svgElement> <#topBar>;
    <#x> ?topBarX;
    <#y> ?topBarY;
    <#width> ?topBarWidth;
    <#height> ?topBarHeight;
    <#cols> ?numTopImages;
    <#rows> 1.
#    xml:hasChild <#topRect>.

#  <#topRect> 
#    a svg:rect;
#    nn:x ?topBarX ;
#    nn:y ?topBarY ;
#    nn:width ?topBarWidth ;
#    nn:height ?topBarHeight .

  <#bottomBar> 
    a svg:g;
    xml:hasChild <#bottomRect>.

  <#bottomRect> 
    a svg:rect;
    nn:x ?bottomBarX ;
    nn:y ?bottomBarY ;
    nn:width ?bottomBarWidth ;
    nn:height ?bottomBarHeight .

  <#leftBar> 
    a svg:g;
    xml:hasChild <#leftRect>.

  <#leftRect> 
    a svg:rect;
    nn:x ?leftBarX ;
    nn:y ?leftBarY ;
    nn:width ?leftBarWidth ;
    nn:height ?leftBarHeight .

  <#rightBar> 
    a svg:g;
    xml:hasChild <#rightRect>.

  <#rightRect> 
    a svg:rect;
    nn:x ?rightBarX ;
    nn:y ?rightBarY ;
    nn:width ?rightBarWidth ;
    nn:height ?rightBarHeight .

}
WHERE {
  BIND(1000 as ?windowWidth).
  BIND(600 as ?windowHeight).
  BIND(10 as ?padding).
  BIND(100 as ?smallImagesWidth).
  BIND(100 as ?smallImagesHeight).

  BIND(?smallImagesHeight as ?topBarHeight).
  BIND(?smallImagesHeight as ?bottomBarHeight).
  BIND(?smallImagesWidth as ?leftBarWidth).
  BIND(?smallImagesWidth as ?rightBarWidth).

  BIND(?leftBarWidth+2*?padding AS ?centralPanelX).
  BIND(?topBarHeight+2*?padding AS ?centralPanelY).
  BIND(?windowWidth-?leftBarWidth-?rightBarWidth-4*?padding AS ?centralPanelWidth).
  BIND(?windowHeight-?topBarHeight-?bottomBarHeight-4*?padding AS ?centralPanelHeight).

  BIND(?centralPanelWidth AS ?topBarWidth).
  BIND(?centralPanelWidth AS ?bottomBarWidth).

  BIND(?centralPanelX AS ?topBarX).
  BIND(?padding AS ?topBarY).
  BIND(?centralPanelX AS ?bottomBarX).
  BIND(?centralPanelY+?centralPanelHeight+?padding AS ?bottomBarY).

  BIND(?windowHeight-2*?padding AS ?leftBarHeight).
  BIND(?windowHeight-2*?padding AS ?rightBarHeight).

  BIND(?padding AS ?leftBarX).
  BIND(?padding AS ?leftBarY).
  BIND(?centralPanelX+?centralPanelWidth+?padding AS ?rightBarX).
  BIND(?padding AS ?rightBarY).

  BIND(250 as ?infoBoxWidth).
#  BIND(80 as ?infoBoxHeight).
  BIND(25 as ?infoBoxFieldHeight).

  BIND(?centralPanelX+?infoBoxWidth AS ?centralImageX).
  BIND(?centralPanelY AS ?centralImageY).
  BIND(?centralPanelWidth-?infoBoxWidth AS ?centralImageWidth).
  BIND(?centralPanelHeight AS ?centralImageHeight).

  BIND(FLOOR((?topBarWidth-?smallImagesWidth)/(?smallImagesWidth+?padding)+1) AS ?numTopImages).
  BIND(FLOOR((?bottomBarWidth-?smallImagesWidth)/(?smallImagesWidth+?padding)+1) AS ?numBottomImages).
  BIND(FLOOR((?leftBarHeight-?smallImagesHeight)/(?smallImagesHeight+?padding)+1) AS ?numLeftImages).
  BIND(FLOOR((?rightBarHeight-?smallImagesHeight)/(?smallImagesHeight+?padding)+1) AS ?numRightImages).

  BIND(?centralPanelX AS ?infoBoxX).
  BIND(?centralImageY AS ?infoBoxY).
#  BIND(?centralPanelWidth AS ?infoBoxWidth).
  BIND(?centralPanelHeight AS ?infoBoxHeight).

  BIND(?infoBoxY+?infoBoxFieldHeight AS ?infoBoxNameY).
  BIND(?infoBoxY+2*?infoBoxFieldHeight AS ?infoBoxArtistY).
  BIND(?infoBoxY+3*?infoBoxFieldHeight AS ?infoBoxArtFormY).
  BIND(?infoBoxY+4*?infoBoxFieldHeight AS ?infoBoxArtGenreY).
  BIND(?infoBoxY+5*?infoBoxFieldHeight AS ?infoBoxArtSubjectY).
  BIND(?infoBoxY+6*?infoBoxFieldHeight AS ?infoBoxDateY).

}
''' .<#AreaFilters> a df:ConstructGraph ;df:name "AreaFilters" ;df:configTxt '''PREFIX nn:    <http://www.swows.org/xml/no-namespace#>
PREFIX xml:   <http://www.swows.org/2013/07/xml-dom#>
PREFIX svg:   <http://www.w3.org/2000/svg#>
PREFIX xlink: <http://www.w3.org/1999/xlink#>

PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX umbel-sc: <http://umbel.org/umbel/sc/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ff: <http://factforge.net/>
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>

PREFIX sparql-res: <http://www.w3.org/2005/sparql-results#>

CONSTRUCT {
  <#topBarArea>
    a <#ImageArea>;
    <#filter> <#topBarFilter>.
  <#topBarFilter>
    <#equalValProp>
      fb:visual_art.artwork.art_form,
      fb:visual_art.artwork.art_genre;
    <#diffValProp>
      fb:visual_art.artwork.artist;
    <#orderProps>
      ().
}
WHERE {
}
''' .<#RelatedArtwork> a df:ConstructGraph ;df:name "RelatedArtwork" ;df:input [ a df:InlineDataset ;df:namedInput [a df:NamedGraph ; df:name "AreaFilters" ; df:input <#AreaFilters> ; df:id <#areaFilters> ];df:namedInput [a df:NamedGraph ; df:name "Selected" ; df:input <#SelArtwork> ; df:id <#selected> ];];df:configTxt '''PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?area ?relatedArtwork
WHERE {

  GRAPH <#selected> {
    <#global> <#selectedArtwork> ?selectedArtwork.
  }

  GRAPH <#areaFilters> {
    ?area
      a <#ImageArea>;
      <#filter> ?filter.
#    ?filter
#      <#equalValProp> ?equalValProp;
#      <#diffValProp> ?diffValProp;
#      <#orderProps> ?orderProps.
  
    {
      SELECT
        ?filter
        (COUNT(DISTINCT ?equalValProp) AS ?equalCount)
      WHERE {
        ?filter <#equalValProp> ?equalValProp.
      } GROUP BY ?filter
    }

    {
      SELECT
        ?filter ?selectedArtwork ?relatedArtwork
        (COUNT(DISTINCT ?equalValProp) AS ?equalCount)
      WHERE {
        ?filter <#equalValProp> ?equalValProp.

        SERVICE <http://factforge.net/sparql> {
          SELECT DISTINCT ?equalValProp ?selectedArtwork ?relatedArtwork
          WHERE {

            ?selectedArtwork ?equalValProp ?equalValPropValue.

            ?relatedArtwork
              a fb:visual_art.artwork;
              fb:common.topic.image/fb:type.content.source ?da_ImageSource;
              ?equalValProp ?equalValPropValue.

            FILTER(?relatedArtwork != ?selectedArtwork).
            FILTER(STRSTARTS(STR(?relatedArtwork),STR(fb:m))).

          }
        }
#        BIND(ABS(xsd:integer(?da_date_completed-?date_completed)) AS ?dateDiff). 

      }
      GROUP BY ?filter ?selectedArtwork ?relatedArtwork
#      ORDER BY ?dateDiff
    }
  }
}
ORDER BY ?area
LIMIT 7
''' .<#TuplesOutput> a df:ConstructGraph ;df:name "TuplesOutput" ;df:input [ a df:InlineDataset ;df:namedInput [a df:NamedGraph ; df:name "Input" ; df:input <#RelatedArtwork> ; df:id <#input> ];];df:configTxt '''PREFIX nn:    <http://www.swows.org/xml/no-namespace#>
PREFIX xml:   <http://www.swows.org/2013/07/xml-dom#>
PREFIX svg:   <http://www.w3.org/2000/svg#>
PREFIX xlink: <http://www.w3.org/1999/xlink#>
PREFIX swi:   <http://www.swows.org/instance#>
PREFIX html:  <http://www.w3.org/1999/xhtml#>

PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX umbel-sc: <http://umbel.org/umbel/sc/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ff: <http://factforge.net/>
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>

CONSTRUCT {

  <#svgDoc>
    a xml:Document ;
    xml:hasChild <#htmlElem> .

  <#htmlElem>
    a html:html ;
    xml:hasChild <#body> .

  <#body>
    a html:body ;
    xml:hasChild <#textArea> .

  <#textArea>
    a html:textarea ;
    nn:style "width: 100%; height:100%";
    xml:textContent ?text .

}
WHERE {

  {
  SELECT (GROUP_CONCAT(?tripleStr; separator='\\n') AS ?triplesStr)
  WHERE {
    BIND(STR(<>) AS ?baseStr) .
    BIND(STRLEN(?baseStr) AS ?baseLen) .
    GRAPH <#input> {
      ?s ?p ?o .
    } .
    BIND(STR(?s) AS ?sStr).
    BIND(IF(isBLANK(?s), CONCAT('_:',afn:bnode(?s)), CONCAT('<', IF(SUBSTR(?sStr,0,?baseLen+1)=?baseStr,SUBSTR(?sStr,?baseLen+1),?sStr), '>')) AS ?sOut).
    BIND(STR(?p) AS ?pStr).
    BIND(CONCAT('<', IF(SUBSTR(?pStr,0,?baseLen+1)=?baseStr,SUBSTR(?pStr,?baseLen+1),?pStr), '>') AS ?pOut).
    BIND(STR(?o) AS ?oStr).
    BIND(IF(isBLANK(?o), CONCAT('_:',afn:bnode(?o)), IF(isIRI(?o), CONCAT('<', IF(SUBSTR(?oStr,0,?baseLen+1)=?baseStr,SUBSTR(?oStr,?baseLen+1),?oStr), '>'), IF(isNumeric(?o), STR(?o), CONCAT('"', STR(?o), '"'))) ) AS ?oOut).
    BIND(CONCAT(?sOut, ' ', ?pOut, ' ', ?oOut, '.') AS ?tripleStr).
  }
  }
 
  BIND(CONCAT('BASE <',STR(<>),'>\\n',COALESCE(?triplesStr,'')) AS ?text).

}
''' .<#View> a df:ConstructGraph ;df:name "View" ;df:input [ a df:InlineDataset ;df:namedInput [a df:NamedGraph ; df:name "DiffArtist" ; df:input <#RelatedArtwork> ; df:id <#diffArtist> ];df:namedInput [a df:NamedGraph ; df:name "Framing" ; df:input <#Framing> ; df:id <#framing> ];df:namedInput [a df:NamedGraph ; df:name "Selected" ; df:input <#SelArtwork> ; df:id <#selected> ];];df:configTxt '''PREFIX nn:    <http://www.swows.org/xml/no-namespace#>
PREFIX xml:   <http://www.swows.org/2013/07/xml-dom#>
PREFIX svg:   <http://www.w3.org/2000/svg#>
PREFIX xlink: <http://www.w3.org/1999/xlink#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX fb: <http://rdf.freebase.com/ns/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbp-ont: <http://dbpedia.org/ontology/>
PREFIX umbel-sc: <http://umbel.org/umbel/sc/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ff: <http://factforge.net/>
PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>

PREFIX sparql-res: <http://www.w3.org/2005/sparql-results#>

CONSTRUCT {

  <#centralImage> xlink:href ?mainImageURI .

  <#infoBoxName> xml:textContent ?nameStr .
  <#infoBoxArtist> xml:textContent ?artistStr .
  <#infoBoxArtForm> xml:textContent ?artFormStr .
  <#infoBoxArtGenre> xml:textContent ?artGenreStr .
  <#infoBoxArtSubject> xml:textContent ?artSubjectStr .
  <#infoBoxDate> xml:textContent ?dateStr .

  <#topBar> xml:hasChild ?relArtwork .

#    xml:listenedEventType "touchstart", "touchmove", "touchend";


#  ?topImage
  ?relArtwork
    a svg:image ;
    nn:x ?topBarImageX ;
    nn:y ?topBarY ;
    nn:width ?smallImagesWidth ;
    nn:height ?smallImagesHeight ;
    xml:listenedEventType "click";
    xlink:href ?relImageIRI .
    

#  <#bottomBar> 
#  <#leftBar> 
#  <#rightBar> 

}
WHERE {
  BIND('en' as ?language).
 
  GRAPH <#framing> {
    <>
      <#padding> ?padding;
      <#smallImagesWidth> ?smallImagesWidth;
      <#smallImagesHeight> ?smallImagesHeight;
      <#windowWidth> ?windowWidth;
      <#windowHeight> ?windowHeight.
    <#topBarArea>
      <#x> ?topBarX;
      <#y> ?topBarY;
      <#width> ?topBarWidth;
      <#height> ?topBarHeight;
      <#cols> ?areaSpaces.
  }

  GRAPH <#selected> {
    <#global> <#selectedArtwork> ?selectedArtwork.
  }

#  BIND(0 as ?daArtworkIndex).

  GRAPH <#relArtwork> {
    {
      SELECT
        ?relAreaStr
        (COUNT(DISTINCT ?result) AS ?areaAwNum)
        (MIN(xsd:integer(?relArtworkGenIndexStr)) AS ?areaMinAwIndex)
      WHERE {
        ?result a sparql-res:result.
        ?result
          a sparql-res:result;
          xml:orderKey ?relArtworkGenIndexStr;
          xml:hasChild ?areaBinding.
        ?areaBinding
          a sparql-res:binding;
          nn:name "area";
          xml:hasChild/xml:hasChild/xml:nodeValue ?relAreaStr.
      }
      GROUP BY ?relAreaStr
    }
    ?result
      a sparql-res:result;
      xml:orderKey ?relArtworkGenIndexStr;
      xml:hasChild ?areaBinding, ?awBinding.
    ?areaBinding
      a sparql-res:binding;
      nn:name "area";
      xml:hasChild/xml:hasChild/xml:nodeValue ?relAreaStr.
    ?awBinding
      a sparql-res:binding;
      nn:name "relatedArtwork";
      xml:hasChild/xml:hasChild/xml:nodeValue ?relArtworkStr.
  }

  BIND(IRI(?relAreaStr) AS ?relArea).
  BIND(xsd:integer(?relArtworkGenIndexStr) AS ?relArtworkGenIndex).
  BIND(?relArtworkGenIndex-?areaMinAwIndex AS ?relArtworkIndex).
  BIND(IF(?areaAwNum>?areaSpaces,?areaSpaces,?areaAwNum) AS ?areaImagesNum).
  BIND((?topBarWidth-?smallImagesWidth*?areaImagesNum)/(?areaImagesNum+1) AS ?topBarPadding).
  BIND(?topBarX+(?relArtworkIndex+1)*?topBarPadding+?relArtworkIndex*?smallImagesWidth AS ?topBarImageX).

  BIND(IRI(?relArtworkStr) AS ?relArtwork) .

  SERVICE <http://factforge.net/sparql> {
    ?selectedArtwork
      fb:common.topic.image ?mainImage ;
      fb:type.object.name ?name ;
      fb:visual_art.artwork.artist ?artist ;
      fb:visual_art.artwork.date_completed ?date_completed ;
      fb:visual_art.artwork.art_form ?art_form ;
      fb:visual_art.artwork.art_genre ?art_genre .
    OPTIONAL {
      ?selectedArtwork fb:visual_art.artwork.art_subject ?art_subject.
      ?art_subject fb:type.object.name ?artSubjectName.
      FILTER (lang(?artSubjectName) = ?language).
    }.
#      fb:common.topic.description ?mainDescription .
    ?mainImage
	fb:type.content.source ?mainImageSource ;
    	fb:common.image.size ?size .
    ?mainImageSource fb:type.content_import.uri ?mainImageURI .
    ?size
        fb:measurement_unit.rect_size.x ?sizeX ;
        fb:measurement_unit.rect_size.y ?sizeY .
    ?artist
      fb:type.object.name ?artistName .
    ?art_form fb:type.object.name ?artFormName .
    ?art_genre fb:type.object.name ?artGenreName .
    
    FILTER ( lang(?name) = ?language ).
    FILTER ( lang(?artistName) = ?language ).
    FILTER ( lang(?artFormName) = ?language ).
    FILTER ( lang(?artGenreName) = ?language ).
    
#    FILTER langMatches( lang(?artistName), ?language ) .

#     ?daArtwork ?p ?o .

#    OPTIONAL {
      ?relArtwork fb:common.topic.image/fb:type.content.source/fb:type.content_import.uri ?relImageIRI.
#    }

  }

#  SERVICE <http://factforge.net/sparql> {
#    OPTIONAL {
#      ?da_artwork fb:common.topic.image ?da_image .
#      ?da_image fb:type.content.source ?da_ImageSource.
#    }
#  }

  BIND(CONCAT('Name: ',?name) AS ?nameStr).
  BIND(CONCAT('Artist: ',?artistName) AS ?artistStr).
  BIND(CONCAT('Form: ',?artFormName) AS ?artFormStr).
  BIND(CONCAT('Genre: ',?artGenreName) AS ?artGenreStr).
  BIND(CONCAT('Subject: ',?artSubjectName) AS ?artSubjectStr).
  BIND(CONCAT('Date: ',?date_completed) AS ?dateStr).
}
''' .